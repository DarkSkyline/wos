<?php

namespace GameBundle\Repository;

/**
 * TownBuldingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TownBuldingRepository extends \Doctrine\ORM\EntityRepository
{
    public function getBuilding($id){
        return $this->getEntityManager()
            ->createQuery(
                'SELECT tb, b, r, bt FROM GameBundle:TownBuilding tb
                     JOIN tb.building b
                     LEFT JOIN b.required r
                     JOIN b.buildingType bt
                     JOIN b.towns on
                     WHERE b.id = :id'
            )
            ->setParameter('id', $id)
            ->getOneOrNullResult();
    }

    public function getLvl($building, $town) {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT PARTIAL tb.{id, lvl} FROM GameBundle:TownBuilding tb
                 INNER JOIN tb.building b
                 WHERE tb.town = :town AND b.buildingType = :building'
            )
            ->setParameters(array(':town' => $town, 'building' => $building))
            ->getOneOrNullResult();
    }

    public function exist($building, $town) {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT COUNT(tb.id) AS nb FROM GameBundle:TownBuilding tb
                WHERE tb.town = :town AND tb.building = :building'
            )
            ->setParameters(array(':town' => $town, 'building' => $building))
            ->getOneOrNullResult();
    }

    public function building($batiment, $town) {
        $i = 0;
        $where = '';
        foreach($batiment as $b) {
            echo $i;
            if($i == 0) {
                $where = $where.'tb.buildingType = :building'.$i.' AND tb.lvl >= :buildingLvl'.$i;
            }
            else
                $where = $where.' OR tb.buildingType = :building'.$i.' AND tb.lvl >= :buildingLvl'.$i;
            $i++;
        }
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT COUNT(tb.id) FROM GameBundle:TownBuilding tb
                 WHERE tb.town = :town AND ('.$where.')'
            );
        $i = 0;
        foreach($batiment as $b) {
            echo $i;
            $q = $query->setParameter('building'.$i, $b->getBuildingFather()->getBuildingType());
            $q = $query->setParameter('buildingLvl'.$i, 1);
            $i++;
        }

        return $q->setParameter('town', $town)
            ->getSingleScalarResult();
    }
}
